from flask import Flask, request, jsonify
from flask_cors import CORS
import fitz   # PyMuPDF
import pdfplumber
import os
from openai import OpenAI
from modules.chart import generate_chart_data

app = Flask(__name__)
CORS(app)

# Configura cliente OpenAI
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# Mem√≥ria tempor√°ria para chat
ultimo_embarque = None
ultimo_temp_text = ""
ultimo_sm_text = ""

@app.route('/health', methods=['GET'])
def health():
    return jsonify(status="ok"), 200

@app.route('/')
def home():
    return 'Coldchain backend est√° no ar! üöÄ'

@app.route('/analisar', methods=['POST'])
def analisar():
    global ultimo_embarque, ultimo_temp_text, ultimo_sm_text

    embarque = request.form.get('embarque')
    temp_pdf = request.files.get('relatorio_temp')
    sm_pdf = request.files.get('solicitacao_sm')

    if not embarque or not temp_pdf or not sm_pdf:
        return jsonify({'error': 'Faltam dados no formul√°rio'}), 400

    try:
        # 1) Extrai textos brutos dos PDFs
        temp_text = ""
        with fitz.open(stream=temp_pdf.read(), filetype="pdf") as doc:
            for page in doc:
                temp_text += page.get_text()

        sm_pdf.stream.seek(0)
        sm_text = ""
        with pdfplumber.open(sm_pdf.stream) as pdf:
            for page in pdf.pages:
                sm_text += page.extract_text() or ""

        # 2) Gera payload do gr√°fico via m√≥dulo
        extracted = {
            'relatorio_temp': temp_text,
            'solicitacao_sm': sm_text
        }
        grafico = generate_chart_data(extracted)

        # 3) Armazena para contexto de chat (limita tamanho)
        ultimo_embarque = embarque
        ultimo_temp_text = temp_text[:3000]
        ultimo_sm_text = sm_text[:3000]

        # 4) Prompt final para relat√≥rio executivo
        final_prompt = f"""
Voc√™ √© um analista experiente em cadeia fria. Com base nos relat√≥rios abaixo, gere um relat√≥rio executivo abordando:
- Cabe√ßalho (Cliente, Origem, Destino, Datas)
- Resumo de excurs√£o de temperatura
- Pontos cr√≠ticos
- Sugest√µes de melhoria

RELAT√ìRIO DE TEMPERATURA:
{ultimo_temp_text}

RELAT√ìRIO SM:
{ultimo_sm_text}
"""
          # 4) Prompt final para relat√≥rio executivo com estrutura tabular
from datetime import datetime
from zoneinfo import ZoneInfo

# Data/hora atuais em Bras√≠lia
agora = datetime.now(ZoneInfo("America/Sao_Paulo"))\
          .strftime("%d/%m/%Y %H:%M:%S")

final_prompt = f"""
1. Cabe√ßalho
   - **T√≠tulo**: An√°lise de Embarque com Temperatura Controlada
   - **Data/Hora**: {agora} (Hor√°rio de Bras√≠lia)

2. Origem e Destino
   | Campo                | Valor                                                  |
   |----------------------|--------------------------------------------------------|
   | Cliente              | {{nome do cliente extra√≠do ou ‚ÄúN√£o encontrado‚Äù}}       |
   | Cidade Origem        | {{cidade de coleta ou ‚ÄúN√£o encontrado‚Äù}}              |
   | Endere√ßo Origem      | {{endere√ßo de coleta ou ‚ÄúN√£o encontrado‚Äù}}            |
   | Cidade Destino       | {{cidade de entrega ou ‚ÄúN√£o encontrado‚Äù}}             |
   | Endere√ßo Destino     | {{endere√ßo de entrega ou ‚ÄúN√£o encontrado‚Äù}}           |
   | Prev. Coleta         | {{data/hora prevista de coleta ou ‚ÄúN√£o encontrado‚Äù}}  |
   | Prev. Entrega        | {{data/hora prevista de entrega ou ‚ÄúN√£o encontrado‚Äù}} |

3. Dados da Carga
   - **Material**: {{tipo de material ou ‚ÄúN√£o encontrado‚Äù}}
   - **Faixa de Temperatura**: {grafico['yMin']} a {grafico['yMax']} ¬∞C

4. Avalia√ß√£o dos Eventos
   Forne√ßa uma avalia√ß√£o detalhada de como se comportou a temperatura durante o transporte,
   destacando excurs√µes, pontos cr√≠ticos e varia√ß√µes relevantes.

### RELAT√ìRIO DE TEMPERATURA
{ultimo_temp_text}

### RELAT√ìRIO SM
{ultimo_sm_text}
"""
